did-document = {
    ? "@context" : "https://www.w3.org/ns/did/v1" / ["https://www.w3.org/ns/did/v1", 1*~uri ] 
    id : did 
    controller :  did / [1*did]
    verificationMethod : [ 1* verificationMethod ]  ; A public key can be used as a verification method.
    ? service : [1* serviceEndpoint ]                 ; The optional service parameter describes one or more service endpoints. 
 }


;; DID syntax according to did-core specification, see: https://www.w3.org/TR/did-core/#did-syntax.  method-name must be registered and match method-name below
did = text .regexp "did\\:(?<method_name>[A-Za-z0-9]+)\\:(?<method_specific_id>[A-Za-z0-9\\.\\-\\:\\_]+)"


;; DID url syntax including path, query and fragment 
did-url = text .regexp "did\\:(?<did_method>[a-z0-9]+)\\:(?<did_method_identifier>[A-Za-z0-9\\.\\-\\:\\_]+)\\/?(?<path>[A-Za-z0-9\\/]+)\\??(?<query>[A-Za-z0-9\\=\\&\\%\\-\\:]+)?\\#?(?<fragment>[A-Za-z0-9\\-\\_]+)"


;; base URI value is the DID that is associated with the DID subject
relative-did-url = text .regexp "#.+"   ;  fragment identifier of self relative DID url, i.e. #key-1 in DID document with `id` = did:example:123456789abcdefghi becomes `did:example:123456789abcdefghi#key-1`


;; The associated value MUST be an ordered set of one or more verification methods. Each verification method MAY be embedded or referenced.
verificationMethod = publicKeyHex / ethereumAddress / publicKeyPem / publicKeyJwk / publicKeyBase58 / did-url / relative-did-url / publicKeyGpg / publicKey


;; this is the list of all registered DID methods including `example` for testing 
;; did methods are limited to method-name = 1*method-char
; method-name =  
;     "abt" / "btcr" / "stack" / "erc725" / "example" / "ipid" / 
;     "life" / "sov" / "uport" / "ethr" / "v1" / "com" / "dom" / 
;     "ont" / "vvo" / "aergo" / "icon" / "is" / "iwt" / "ockam" / 
;     "ala" / "op" / "jlinc" / "ion" / "jolo" / "bryk" / "peer" / 
;     "selfkey" / "meta" / "tys" / "git" / "tangle" / "emtrust" / 
;     "ttm" / "wlk" / "pistis" / "holo" / "web" / "io" / "vaultie" / 
;     "moac" / "omn" / "work" / "vid" / "ccp" / "jnctn" / "evan" / 
;     "elastos" / "kilt" / "elem" / "github" / "bid" / "ptn" / "echo" / 
;     "trustbloc" / "san" / "gatc" / "factom" / "signor" / "hedera" / 
;     "sirius" / "dock" / "twit" / "near" / "vaa" / "bba" / "morpheus" / 
;     "etho" / "bnb" / "celo" / "klay" / "trx" / "grg" / "schema" / "key" /
;     "solid"


;;; 
; use
;;; 
verificationMethodUseTypes = [ ?"authentication" / ? "assertionMethod" / "keyAgreement" / "capabilityDelegation" / "capabilityInvocation" / "encryption"


;;; 
; verificationMethod types 
;;; 


publicKey = {
    "id" : did-url
    "type" : VerificationMethodTypes
    "use" : [ 1* verificationMethodUseTypes ]
    "controller" : did
    "publicKeyPem" : text       ; this could be improved 
}


publicKeyJwk = {
    "id" : did-url
    "type" : VerificationMethodTypes
    "use" : [ 1* verificationMethodUseTypes ]
    "controller" : did
    "publicKeyJwk" : publicKeyEC / publicKeyoct / publicKeyed25519 / publicKeyRSA
}


;;; public key Hex is a type of verification method with public key encoded as base16
publicKeyHex = {
    "id" : did-url
    "type" : VerificationMethodTypes
    "use" : [ 1* verificationMethodUseTypes ]
    "controller" : did 
    "publicKeyHex" : text .regexp "[a-zA-F0-9]+"     ; only allows for hexadecimal representations 
}


publicKeyGpg = {
    "id" : did-url
    "type" : VerificationMethodTypes
    "use" : [ 1* verificationMethodUseTypes ]
    "controller" : did 
    "publicKeyGpg" : text                           ;  This could probbaly be better to capture -----BEGIN PGP PUBLIC KEY BLOCK  
}

;;; public key Hex is a type of verification method with the public key encoded as base58 
publicKeyBase58 = {
    "id" : did-url
    "type" : VerificationMethodTypes
    "use" : [ 1* verificationMethodUseTypes ]
    "controller" : did 
    "publicKeyBase58" : text .regexp "[a-zA-Z0-9]+"  ; only allows for base58 representations 
}


;;; ethereeum address is a type of verification method with ethereum address as public key information 
ethereumAddress = {
    "id" : did-url
    "type" : "EcdsaSecp256k1RecoveryMethod2020"     ; this is the only type known for ethereum address 
    "use" : [ 1* verificationMethodUseTypes ]
    "controller" : did 
    "ethereumAddress" :  text .regexp "0x[a-zA-F0-9]{40,40}"     ; only allows for hexadecimal representations
}


publicKeyPem = {
    "id" : did-url
    "type" : VerificationMethodTypes
    "use" : [ 1* verificationMethodUseTypes ]
    "controller" : did
    "publicKeyPem" : text       ; this could be improved 
}


;;;
; below is a partial list of properties of various well-known JWK public key types. 
; as per https://github.com/w3c/did-core/issues/240, the is an active area of discussion 
; additional constraints are necessary to finalize the data definition all all JWK types
; below is a partial list of properties of various well-known JWK public key types. 
;;;; 


;;;
publicKeyEC = {
    "crv" : "P-256" / "P-384" / "P-521"
    "kty" : "EC"
    "x" : text 
    "y" : text 
    ? "kid" : text        ; should be sha256 fingerprint 
} 


;;; Octet sequence key for representing secret keys
publicKeyoct = {
    "kty" : "oct"
    ? "kid" : text ; this should be the sha256 fingerprint 
    "alg" : "HS256" / "HS384" / "HS512"
    "k" : text .size 32    ; for shared secret 
}


;; Octet key pair key like ed25519 
publicKeyed25519 = {
    "kty" : "OKP"
    "crv" : "Ed25519"
    "x"   : text .size 32
    "use" : "sig" / "enc"
    ? "kid" : text           ; should be sha256 fingerprint 
}



;;; RSA key type 
publicKeyRSA = {
    "alg" : "RSA"
    "mod" : text   ; 
    "exp" : text   ; 
    ? "kid" : text        ; should be sha256 fingerprint
}


; current list of all registered Verification Method classes
; These are classes not a properties - in other words, use them for the value of type in a verification method object.
VerificationMethodTypes = 
    "JsonWebKey2020" / 
    "Ed25519VerificationKey2018" / 
    "EcdsaSecp256k1VerificationKey2019" / 
    "SchnorrSecp256k1VerificationKey2019" /
    "Ed25519VerificationKey2018" / 
    "GpgVerificationKey2020" / 
    "RsaVerificationKey2018" / 
    "X25519KeyAgreementKey2019" /
    "EcdsaSecp256k1RecoveryMethod2020"
    


serviceEndpoint = {
    ? "@content" : ~uri
    "id" : did-url
    "type" : text 
    ? "description" : text 
    "serviceEndpoint" : ~uri 
}